"""
This code is used to initialize the first layer's kernels
"""
import numpy as np

class SRM(object):
	def get_filters(self):#get 30 filters from SRM
		f=[]
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,-1,0,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,1,0,0,0],
			[0,0,-1,0,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,1,0,0],
			[0,0,-1,0,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,1,0],
			[0,0,-1,0,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,-1,1,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,-1,0,0],
			[0,0,0,1,0],
			[0,0,0,0,0]])		
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,-1,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,-1,0,0],
			[0,1,0,0,0],
			[0,0,0,0,0]])#above is 1st order
		f.append(
			[[0,0,0,0,0],
			[0,1,1,0,0],
			[0,1,-3,0,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,1,1,1,0],
			[0,0,-3,0,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,1,1,0],
			[0,0,-3,1,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,1,0],
			[0,0,-3,1,0],
			[0,0,0,1,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,-3,1,0],
			[0,0,1,1,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,-3,0,0],
			[0,1,1,1,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,-3,0,0],
			[0,1,1,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,1,0,0,0],
			[0,1,-3,0,0],
			[0,1,0,0,0],
			[0,0,0,0,0]])#3st order above
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,-2,1,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,1,0,0,0],
			[0,0,-2,0,0],
			[0,0,0,1,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,1,0,0],
			[0,0,-2,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,1,0],
			[0,0,-2,0,0],
			[0,1,0,0,0],
			[0,0,0,0,0]])#2st order above
		f.append(
			[[0,0,0,0,0],
			[0,-1,2,-1,0],
			[0,2,-4,2,0],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[0,2,-4,2,0],
			[0,-1,2,-1,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,-1,2,0,0],
			[0,2,-4,0,0],
			[0,-1,2,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,2,-1,0],
			[0,0,-4,2,0],
			[0,0,2,-1,0],
			[0,0,0,0,0]])#edge3x3 above
		f.append(
			[[0,0,0,0,0],
			[0,-1,2,-1,0],
			[0,2,-4,2,0],
			[0,-1,2,-1,0],
			[0,0,0,0,0]])#square 3x3
		f.append(
			[[-1,2,-2,2,-1],
			[2,-6,8,-6,2],
			[-2,8,-12,8,-2],
			[2,-6,8,-6,2],
			[-1,2,-2,2,-1]])#quare 5x5
		f.append(
			[[-1,2,-2,2,-1],
			[2,-6,8,-6,2],
			[-2,8,-12,8,-2],
			[0,0,0,0,0],
			[0,0,0,0,0]])
		f.append(
			[[0,0,0,0,0],
			[0,0,0,0,0],
			[-2,8,-12,8,-2],
			[2,-6,8,-6,2],
			[-1,2,-2,2,-1]])
		f.append(
			[[0,0,-2,2,-1],
			[0,0,8  ,-6,2],
			[0,0,-12,8,-2],
			[0,0,8  ,-6,2],
			[0,0,-2 ,2,-1]])
		f.append(
			[[-1,2,-2,0,0],
			[2,-6,8,0,0],
			[-2,8,-12,0,0],
			[2,-6,8,0,0],
			[-1,2,-2,0,0]])
		
		zero_num = 572
		
		rand = np.random.normal(loc=0.0, scale=0.02, size=[572])
		rand = rand.tolist()
		
		count = 0
		sum = 0
		for filter in f :
			for i in range(5):
				for j in range(5):
					if(filter[i][j] == 0):
						filter[i][j] = rand[count]
						count+=1
		f=np.array(f, dtype=np.float32)
		f=f.transpose(1, 2, 0)
		f=np.reshape(f, [5, 5, 1, 30])
		return f
